version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.1.1

commands:
  deploy:
    description: "Deployment of rules server"
    parameters:
      hostname:
        type: string
        default: "ssh.staging.openchs.org"
    steps:
      - attach_workspace:
          at: ~/artifacts

      - run:
          name: Install dependencies and deploy to server
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install make openssl python3-pip
            sudo apt-get install unzip
            sudo pip3 install awscli --upgrade

      - run:
          name: Copy artifacts to server
          command: |
            scp -o StrictHostKeyChecking=no ~/artifacts/rules-server.zip ec2-user@<< parameters.hostname >>:/tmp

      - run:
          name: Deploy server
          command: |
            ssh -o StrictHostKeyChecking=no ec2-user@<< parameters.hostname >> \<< EOF
            sudo rm -rf /opt/rules-server
            sudo unzip -qq /tmp/rules-server.zip -d /opt/
            cd /opt/rules-server
            sudo chmod a+x /opt/rules-server/deploy/install.sh
            sudo /opt/rules-server/deploy/install.sh $OPENCHS_UPLOAD_USER_USER_NAME $OPENCHS_UPLOAD_USER_PASSWORD $AVNI_TZ
            EOF

  deploy_ansible:
    description: "Deployment of rules-server using ansible"
    parameters:
      env:
        type: string
        default: "staging"
    steps:
      - attach_workspace:
          at: ~/artifacts

      - run: sudo apt-get install make openssl

      - run: curl -L https://github.com/avniproject/avni-infra/archive/master.zip >> ~/infra.zip

      - run: |
          cd ~/
          unzip infra.zip
          mv avni-infra-master avni-infra
          rm -rf infra.zip

      - run: echo $ANSIBLE_VAULT_PASS > ~/.vault-pass.txt

      - run: |
          pwd
          cd ~/avni-infra/configure
          VAULT_PASSWORD_FILE=~/.vault-pass.txt app_zip_path=~/artifacts/ make rules-server-<< parameters.env >>

      - run: rm ~/.vault-pass.txt
  setup_server_access:
    description: Generate and copy temporary keys to server
    parameters:
      instance-id:
        type: string
      os-user:
        type: string
        default: ubuntu
      availability-zone:
        type: string
        default: ap-south-1a
    steps:
      - run: rm -rf /tmp/temp_rsa_key*
      - run: ssh-keygen -b 2048 -t rsa -f /tmp/temp_rsa_key -q -N ""
      - run: eval `ssh-agent -s`
      - run: ssh-add /tmp/temp_rsa_key
      - run: |
          aws ec2-instance-connect send-ssh-public-key --instance-id << parameters.instance-id >> --availability-zone << parameters.availability-zone >> --instance-os-user << parameters.os-user >> --no-paginate --ssh-public-key file:///tmp/temp_rsa_key.pub --output text | head -1

jobs:
  app_test:
    docker:
      - image: cimg/node:10.15.1

    working_directory: ~/rules-server

    steps:
      - checkout

      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}

      - run:
          name: NPM Install
          no_output_timeout: 30m
          command: npm install

      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - run: npm test

  app_build:
    docker:
      - image: cimg/node:10.15.1

    working_directory: ~/rules-server

    steps:
      - checkout

      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}

      - run:
          name: NPM Install
          no_output_timeout: 30m
          command: npm install

      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      # https://serverfault.com/questions/265675/how-can-i-zip-compress-a-symlink
      - run: zip --symlinks -r ~/rules-server.zip ../rules-server

      - run: tar -czvf ~/rules-server.tgz  -C ../rules-server .

      - run: mkdir -p ~/artifacts

      - run: echo $CIRCLE_BUILD_NUM > ~/artifacts/build_version

      - run: cp ~/rules-server.zip ~/artifacts/

      - run: cp ~/rules-server.tgz ~/artifacts/

      - persist_to_workspace:
          root: ~/artifacts
          paths:
            - build_version
            - rules-server.zip
            - rules-server.tgz

      - store_artifacts:
          path: ~/artifacts

  build_docker_image:
    docker:
      - image: docker:git
    resource_class: medium
    working_directory: ~/rules-server
    steps:
      - attach_workspace:
          at: ~/artifacts

      - setup_remote_docker

      - run: unzip ~/artifacts/rules-server.zip

      - run:
          name: Determine Docker Tags
          command: |
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              DOCKER_TAG="latest"
            elif [ -n "$CIRCLE_TAG" ]; then
              DOCKER_TAG="$CIRCLE_TAG"
            else
              echo "No valid tag found. Exiting."
              exit 1
            fi
            echo "export DOCKER_TAG=$DOCKER_TAG" >> $BASH_ENV
          shell: /bin/sh

      - run:
          name: Authenticate with Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run:
          name: Build Multi-Platform Docker Image
          command: |
            cd rules-server
            source $BASH_ENV
            docker buildx create --use
            docker buildx build --platform linux/amd64,linux/arm64 --tag "$DOCKER_USERNAME/rules-server:${DOCKER_TAG}" --push -f Dockerfile .
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              SHORT_CIRCLE_SHA=$(echo "$CIRCLE_SHA1" | cut -c1-6)
              docker buildx build --platform linux/amd64,linux/arm64 --tag "$DOCKER_USERNAME/rules-server:${SHORT_CIRCLE_SHA}" --push -f Dockerfile .
            fi

  STAGING_deploy:
    docker:
      - image: cimg/deploy:2023.09-node
    working_directory: ~/
    steps:
      - deploy_ansible:
          env: "staging"
  PRERELEASE_deploy:
    docker:
      - image: cimg/deploy:2023.09-node
    working_directory: ~/
    steps:
      - deploy_ansible:
          env: "prerelease"
  PERF_deploy:
    docker:
      - image: cimg/node:10.24.1
    working_directory: ~/
    steps:
      - deploy:
          hostname: "ssh.perf.openchs.org"
  PRODUCTION_deploy:
    docker:
      - image: cimg/deploy:2023.09-node
    working_directory: ~/
    steps:
      - deploy_ansible:
          env: "prod"
  RWB_STAGING_deploy:
    docker:
      - image: cimg/deploy:2023.09-node
    working_directory: ~/
    steps:
      - aws-cli/setup:
          role_arn: "arn:aws:iam::730335671779:role/avni_circleci_instance_connect"
          region: "ap-south-1"
      - setup_server_access:
          instance-id: "i-00b50ac6e8413fdca"
          availability-zone: "ap-south-1b"
      - deploy_ansible:
          env: "rwb-staging"

  RWB_PRODUCTION_deploy:
    docker:
      - image: cimg/deploy:2023.09-node
    working_directory: ~/
    steps:
      - aws-cli/setup:
          role_arn: "arn:aws:iam::730335671779:role/avni_circleci_instance_connect"
          region: "ap-south-1"
      - setup_server_access:
          instance-id: "i-015a3839bfe137346"
          availability-zone: "ap-south-1a"
      - deploy_ansible:
          env: "rwb-prod"

tags_filter: &tags_filter
  filters:
    tags:
      only: /.*/

workflows:
  version: 2
  test_and_build:
    jobs:
      - app_test:
          <<: *tags_filter
      - app_build:
          <<: *tags_filter
          requires:
            - app_test
      - build_docker_image:
          context: dockerhub
          requires:
            - app_build
          filters:
            tags:
              only: /.*/
            branches:
              only: master
      - STAGING_approve:
          type: approval
          requires:
            - app_build
      - STAGING_deploy:
          context: non-prod-deploy
          filters:
            branches:
              only:
                - master
                - /^3\..*/
          requires:
            - STAGING_approve
      - PRODUCTION_approve:
          type: approval
          requires:
            - app_build
      - PRODUCTION_deploy:
          context: prod-deploy
          requires:
            - PRODUCTION_approve
      - PRERELEASE_approve:
          type: approval
          requires:
            - app_build
      - PRERELEASE_deploy:
          context: non-prod-deploy
          requires:
            - PRERELEASE_approve
      - PERF_approve:
          type: approval
          requires:
            - app_build
      - PERF_deploy:
          context: non-prod-deploy
          requires:
            - PERF_approve
      - RWB_STAGING_approve:
          type: approval
          requires:
            - app_build
      - RWB_STAGING_deploy:
          context:
            - RWB_AWS_OIDC
            - non-prod-deploy
          requires:
            - RWB_STAGING_approve
      - RWB_PRODUCTION_approve:
          type: approval
          requires:
            - app_build
      - RWB_PRODUCTION_deploy:
          context:
            - RWB_AWS_OIDC
            - prod-deploy
          requires:
            - RWB_PRODUCTION_approve

notify:
  webhooks:
    - url: https://webhooks.gitter.im/e/0fdffde721194986f2a0
